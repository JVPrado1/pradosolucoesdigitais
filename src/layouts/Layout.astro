<!doctype html>
<html lang="pt-BR">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{Astro.props.title}</title>
		<meta name="description" content="Prado Soluções Digitais - Transformamos ideias em soluções digitais modernas" />
		
		<!-- Fonts -->
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet">
		
		<!-- Script de inicialização do tema -->
		<script is:inline>
			// Theme management - executa imediatamente antes do HTML renderizar
			function initTheme() {
				const savedTheme = localStorage.getItem('theme');
				// Sempre iniciar com dark, ignorando preferências do sistema
				const theme = savedTheme || 'dark';
				
				// Limpa todas as classes de tema primeiro
				document.documentElement.classList.remove('light', 'dark');
				
				// Aplica apenas a classe necessária para dark
				if (theme === 'dark') {
					document.documentElement.classList.add('dark');
				}
				// Para light, não adiciona classe (Tailwind funciona sem classe para light)
				
				// Aplica atributo (útil para CSS customizado)
				document.documentElement.setAttribute('data-theme', theme);
				
				// Debug
				console.log('Tema inicializado:', theme);
				console.log('Classes no HTML:', document.documentElement.classList.toString());
				console.log('Tema salvo:', localStorage.getItem('theme'));
			}
			
			// Execute imediatamente
			initTheme();
			
			// Função para atualizar logos quando o DOM estiver pronto
			document.addEventListener('DOMContentLoaded', function() {
				updateLogos();
				
				// Observer para mudanças no atributo data-theme
				const observer = new MutationObserver(function(mutations) {
					mutations.forEach(function(mutation) {
						if (mutation.attributeName === 'data-theme') {
							updateLogos();
						}
					});
				});
				
				observer.observe(document.documentElement, { attributes: true });
			});
			
			// Função para atualizar todas as logos baseado no tema atual
			function updateLogos() {
				const currentTheme = document.documentElement.getAttribute('data-theme');
				const logoSrc = currentTheme === 'light' ? '/logo-preto.png' : '/logo.png';
				
				// Atualiza todas as logos
				document.querySelectorAll('[id$="-logo"]').forEach(function(logo) {
					logo.src = logoSrc;
				});
				
				console.log('Logos atualizadas para tema:', currentTheme);
			}
		</script>
	</head>
	<body class="font-inter antialiased bg-background text-foreground transition-colors duration-300">
		<!-- Main Content -->
		<div class="relative">
			<slot />
		</div>

		<script>
			// Ouve mudanças no sistema
			window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
				if (!localStorage.getItem('theme')) {
					const newTheme = e.matches ? 'dark' : 'light';
					document.documentElement.setAttribute('data-theme', newTheme);
					document.documentElement.classList.remove('light', 'dark');
					
					// Adiciona classe dark apenas se o tema for dark
					if (newTheme === 'dark') {
						document.documentElement.classList.add('dark');
					}
					
					console.log('Tema do sistema alterado para:', newTheme);
				}
			});

			// Smooth scrolling and animations
			document.addEventListener('DOMContentLoaded', function() {
				// Intersection Observer for animations
				const observerOptions = {
					threshold: 0.1,
					rootMargin: '0px 0px -50px 0px'
				};

				const observer = new IntersectionObserver((entries) => {
					entries.forEach(entry => {
						if (entry.isIntersecting) {
							entry.target.classList.add('animate-in');
							observer.unobserve(entry.target);
						}
					});
				}, observerOptions);

				// Observe all animated elements
				document.querySelectorAll('.animate-on-scroll').forEach(el => {
					observer.observe(el);
				});

				// Smooth scroll for anchor links
				document.querySelectorAll('a[href^="#"]').forEach(anchor => {
					anchor.addEventListener('click', (e: Event) => {
						e.preventDefault();
						const href = (anchor as HTMLAnchorElement).getAttribute('href');
						const target = href ? document.querySelector(href) : null;
						if (target) {
							target.scrollIntoView({
								behavior: 'smooth',
								block: 'start'
							});
						}
					});
				});
			});
		</script>
	</body>
</html>

<style is:global>
	* {
		box-sizing: border-box;
	}
	
	:root {
		/* Tema Escuro (padrão) */
		--background: #121212;
		--foreground: #ffffff;
		--muted: rgba(255, 255, 255, 0.1);
		--muted-foreground: rgba(255, 255, 255, 0.6);
		--border: rgba(255, 255, 255, 0.1);
		--accent: #00B050;
		--accent-hover: rgba(0, 176, 80, 0.9);
		--card: rgba(255, 255, 255, 0.05);
		--card-hover: rgba(255, 255, 255, 0.1);
		--card-shadow: 0 0 0 transparent;
		--gradient-from: #00B050;
		--gradient-to: #60A5FA;
	}

	[data-theme="light"] {
		/* Tema Claro */
		--linkmenu: black;
		--background: #ffffff;
		--foreground: #121212;
		--muted: rgba(0, 0, 0, 0.05);
		--muted-foreground: rgba(0, 0, 0, 0.7);
		--border: rgba(0, 0, 0, 0.08);
		--accent: #00B050;
		--accent-hover: rgba(0, 176, 80, 0.9);
		--card: rgba(0, 0, 0, 0);
		--card-hover: rgba(0, 0, 0, 0.04);
		--card-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
		--gradient-from: #00B050;
		--gradient-to: #60A5FA;
	}

	html {
		font-family: 'Inter', system-ui, sans-serif;
		scroll-behavior: smooth;
		background-color: var(--background);
		transition: background-color 0.3s ease;
	}
	
	body {
		margin: 0;
		min-height: 100vh;
		color: var(--foreground);
		background-color: var(--background);
		overflow-x: hidden;
		transition: all 0.3s ease;
	}

	/* Scroll animations */
	.animate-on-scroll {
		opacity: 0;
		transform: translateY(20px);
		transition: all 0.6s cubic-bezier(0.16, 1, 0.3, 1);
	}

	.animate-on-scroll.animate-in {
		opacity: 1;
		transform: translateY(0);
	}

	/* Custom scrollbar */
	::-webkit-scrollbar {
		width: 8px;
	}

	::-webkit-scrollbar-track {
		background: var(--background);
	}

	::-webkit-scrollbar-thumb {
		background: var(--accent);
		border-radius: 4px;
	}

	::-webkit-scrollbar-thumb:hover {
		background: var(--accent-hover);
	}

	/* Firefox */
	* {
		scrollbar-width: thin;
		scrollbar-color: var(--accent) var(--background);
	}

	/* Utility classes for theme support */
	.bg-background { background-color: var(--background); }
	.text-foreground { color: var(--foreground); }
	.text-muted-foreground { color: var(--muted-foreground); }
	.bg-card { 
		background-color: var(--card); 
		box-shadow: var(--card-shadow);
	}
	.bg-card-hover { background-color: var(--card-hover); }
	.border-border { border-color: var(--border); }
	.bg-muted { background-color: var(--muted); }


</style>

